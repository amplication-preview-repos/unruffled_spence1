/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProfessionalService } from "../professional.service";
import { ProfessionalCreateInput } from "./ProfessionalCreateInput";
import { Professional } from "./Professional";
import { ProfessionalFindManyArgs } from "./ProfessionalFindManyArgs";
import { ProfessionalWhereUniqueInput } from "./ProfessionalWhereUniqueInput";
import { ProfessionalUpdateInput } from "./ProfessionalUpdateInput";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { ReviewWhereUniqueInput } from "../../review/base/ReviewWhereUniqueInput";
import { ServiceFindManyArgs } from "../../service/base/ServiceFindManyArgs";
import { Service } from "../../service/base/Service";
import { ServiceWhereUniqueInput } from "../../service/base/ServiceWhereUniqueInput";

export class ProfessionalControllerBase {
  constructor(protected readonly service: ProfessionalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Professional })
  async createProfessional(
    @common.Body() data: ProfessionalCreateInput
  ): Promise<Professional> {
    return await this.service.createProfessional({
      data: {
        ...data,

        portfolio: data.portfolio
          ? {
              connect: data.portfolio,
            }
          : undefined,

        service: data.service
          ? {
              connect: data.service,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        experience: true,

        portfolio: {
          select: {
            id: true,
          },
        },

        service: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Professional] })
  @ApiNestedQuery(ProfessionalFindManyArgs)
  async professionals(@common.Req() request: Request): Promise<Professional[]> {
    const args = plainToClass(ProfessionalFindManyArgs, request.query);
    return this.service.professionals({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        experience: true,

        portfolio: {
          select: {
            id: true,
          },
        },

        service: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Professional })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async professional(
    @common.Param() params: ProfessionalWhereUniqueInput
  ): Promise<Professional | null> {
    const result = await this.service.professional({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        experience: true,

        portfolio: {
          select: {
            id: true,
          },
        },

        service: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Professional })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProfessional(
    @common.Param() params: ProfessionalWhereUniqueInput,
    @common.Body() data: ProfessionalUpdateInput
  ): Promise<Professional | null> {
    try {
      return await this.service.updateProfessional({
        where: params,
        data: {
          ...data,

          portfolio: data.portfolio
            ? {
                connect: data.portfolio,
              }
            : undefined,

          service: data.service
            ? {
                connect: data.service,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          experience: true,

          portfolio: {
            select: {
              id: true,
            },
          },

          service: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Professional })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProfessional(
    @common.Param() params: ProfessionalWhereUniqueInput
  ): Promise<Professional | null> {
    try {
      return await this.service.deleteProfessional({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          experience: true,

          portfolio: {
            select: {
              id: true,
            },
          },

          service: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/reviews")
  @ApiNestedQuery(ReviewFindManyArgs)
  async findReviews(
    @common.Req() request: Request,
    @common.Param() params: ProfessionalWhereUniqueInput
  ): Promise<Review[]> {
    const query = plainToClass(ReviewFindManyArgs, request.query);
    const results = await this.service.findReviews(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        comment: true,
        rating: true,

        professional: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reviews")
  async connectReviews(
    @common.Param() params: ProfessionalWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        connect: body,
      },
    };
    await this.service.updateProfessional({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reviews")
  async updateReviews(
    @common.Param() params: ProfessionalWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        set: body,
      },
    };
    await this.service.updateProfessional({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reviews")
  async disconnectReviews(
    @common.Param() params: ProfessionalWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        disconnect: body,
      },
    };
    await this.service.updateProfessional({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/services")
  @ApiNestedQuery(ServiceFindManyArgs)
  async findServices(
    @common.Req() request: Request,
    @common.Param() params: ProfessionalWhereUniqueInput
  ): Promise<Service[]> {
    const query = plainToClass(ServiceFindManyArgs, request.query);
    const results = await this.service.findServices(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        price: true,

        professional: {
          select: {
            id: true,
          },
        },

        booking: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/services")
  async connectServices(
    @common.Param() params: ProfessionalWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        connect: body,
      },
    };
    await this.service.updateProfessional({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/services")
  async updateServices(
    @common.Param() params: ProfessionalWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        set: body,
      },
    };
    await this.service.updateProfessional({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/services")
  async disconnectServices(
    @common.Param() params: ProfessionalWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        disconnect: body,
      },
    };
    await this.service.updateProfessional({
      where: params,
      data,
      select: { id: true },
    });
  }
}
