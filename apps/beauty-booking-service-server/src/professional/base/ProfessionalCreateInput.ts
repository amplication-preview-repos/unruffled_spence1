/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  IsInt,
  Min,
  Max,
  ValidateNested,
} from "class-validator";
import { ReviewCreateNestedManyWithoutProfessionalsInput } from "./ReviewCreateNestedManyWithoutProfessionalsInput";
import { Type } from "class-transformer";
import { PortfolioWhereUniqueInput } from "../../portfolio/base/PortfolioWhereUniqueInput";
import { ServiceWhereUniqueInput } from "../../service/base/ServiceWhereUniqueInput";
import { ServiceCreateNestedManyWithoutProfessionalsInput } from "./ServiceCreateNestedManyWithoutProfessionalsInput";

@InputType()
class ProfessionalCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  experience?: number | null;

  @ApiProperty({
    required: false,
    type: () => ReviewCreateNestedManyWithoutProfessionalsInput,
  })
  @ValidateNested()
  @Type(() => ReviewCreateNestedManyWithoutProfessionalsInput)
  @IsOptional()
  @Field(() => ReviewCreateNestedManyWithoutProfessionalsInput, {
    nullable: true,
  })
  reviews?: ReviewCreateNestedManyWithoutProfessionalsInput;

  @ApiProperty({
    required: false,
    type: () => PortfolioWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PortfolioWhereUniqueInput)
  @IsOptional()
  @Field(() => PortfolioWhereUniqueInput, {
    nullable: true,
  })
  portfolio?: PortfolioWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ServiceWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ServiceWhereUniqueInput)
  @IsOptional()
  @Field(() => ServiceWhereUniqueInput, {
    nullable: true,
  })
  service?: ServiceWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ServiceCreateNestedManyWithoutProfessionalsInput,
  })
  @ValidateNested()
  @Type(() => ServiceCreateNestedManyWithoutProfessionalsInput)
  @IsOptional()
  @Field(() => ServiceCreateNestedManyWithoutProfessionalsInput, {
    nullable: true,
  })
  services?: ServiceCreateNestedManyWithoutProfessionalsInput;
}

export { ProfessionalCreateInput as ProfessionalCreateInput };
