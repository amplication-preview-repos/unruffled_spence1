/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Professional } from "./Professional";
import { ProfessionalCountArgs } from "./ProfessionalCountArgs";
import { ProfessionalFindManyArgs } from "./ProfessionalFindManyArgs";
import { ProfessionalFindUniqueArgs } from "./ProfessionalFindUniqueArgs";
import { CreateProfessionalArgs } from "./CreateProfessionalArgs";
import { UpdateProfessionalArgs } from "./UpdateProfessionalArgs";
import { DeleteProfessionalArgs } from "./DeleteProfessionalArgs";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { ServiceFindManyArgs } from "../../service/base/ServiceFindManyArgs";
import { Service } from "../../service/base/Service";
import { Portfolio } from "../../portfolio/base/Portfolio";
import { ProfessionalService } from "../professional.service";
@graphql.Resolver(() => Professional)
export class ProfessionalResolverBase {
  constructor(protected readonly service: ProfessionalService) {}

  async _professionalsMeta(
    @graphql.Args() args: ProfessionalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Professional])
  async professionals(
    @graphql.Args() args: ProfessionalFindManyArgs
  ): Promise<Professional[]> {
    return this.service.professionals(args);
  }

  @graphql.Query(() => Professional, { nullable: true })
  async professional(
    @graphql.Args() args: ProfessionalFindUniqueArgs
  ): Promise<Professional | null> {
    const result = await this.service.professional(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Professional)
  async createProfessional(
    @graphql.Args() args: CreateProfessionalArgs
  ): Promise<Professional> {
    return await this.service.createProfessional({
      ...args,
      data: {
        ...args.data,

        portfolio: args.data.portfolio
          ? {
              connect: args.data.portfolio,
            }
          : undefined,

        service: args.data.service
          ? {
              connect: args.data.service,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Professional)
  async updateProfessional(
    @graphql.Args() args: UpdateProfessionalArgs
  ): Promise<Professional | null> {
    try {
      return await this.service.updateProfessional({
        ...args,
        data: {
          ...args.data,

          portfolio: args.data.portfolio
            ? {
                connect: args.data.portfolio,
              }
            : undefined,

          service: args.data.service
            ? {
                connect: args.data.service,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Professional)
  async deleteProfessional(
    @graphql.Args() args: DeleteProfessionalArgs
  ): Promise<Professional | null> {
    try {
      return await this.service.deleteProfessional(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Review], { name: "reviews" })
  async findReviews(
    @graphql.Parent() parent: Professional,
    @graphql.Args() args: ReviewFindManyArgs
  ): Promise<Review[]> {
    const results = await this.service.findReviews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Service], { name: "services" })
  async findServices(
    @graphql.Parent() parent: Professional,
    @graphql.Args() args: ServiceFindManyArgs
  ): Promise<Service[]> {
    const results = await this.service.findServices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Portfolio, {
    nullable: true,
    name: "portfolio",
  })
  async getPortfolio(
    @graphql.Parent() parent: Professional
  ): Promise<Portfolio | null> {
    const result = await this.service.getPortfolio(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Service, {
    nullable: true,
    name: "service",
  })
  async getService(
    @graphql.Parent() parent: Professional
  ): Promise<Service | null> {
    const result = await this.service.getService(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
