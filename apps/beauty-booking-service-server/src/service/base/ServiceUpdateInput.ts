/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  IsNumber,
  Min,
  Max,
  ValidateNested,
} from "class-validator";
import { ProfessionalUpdateManyWithoutServicesInput } from "./ProfessionalUpdateManyWithoutServicesInput";
import { Type } from "class-transformer";
import { ProfessionalWhereUniqueInput } from "../../professional/base/ProfessionalWhereUniqueInput";
import { BookingWhereUniqueInput } from "../../booking/base/BookingWhereUniqueInput";
import { BookingUpdateManyWithoutServicesInput } from "./BookingUpdateManyWithoutServicesInput";

@InputType()
class ServiceUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  price?: number | null;

  @ApiProperty({
    required: false,
    type: () => ProfessionalUpdateManyWithoutServicesInput,
  })
  @ValidateNested()
  @Type(() => ProfessionalUpdateManyWithoutServicesInput)
  @IsOptional()
  @Field(() => ProfessionalUpdateManyWithoutServicesInput, {
    nullable: true,
  })
  professionals?: ProfessionalUpdateManyWithoutServicesInput;

  @ApiProperty({
    required: false,
    type: () => ProfessionalWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ProfessionalWhereUniqueInput)
  @IsOptional()
  @Field(() => ProfessionalWhereUniqueInput, {
    nullable: true,
  })
  professional?: ProfessionalWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => BookingWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BookingWhereUniqueInput)
  @IsOptional()
  @Field(() => BookingWhereUniqueInput, {
    nullable: true,
  })
  booking?: BookingWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => BookingUpdateManyWithoutServicesInput,
  })
  @ValidateNested()
  @Type(() => BookingUpdateManyWithoutServicesInput)
  @IsOptional()
  @Field(() => BookingUpdateManyWithoutServicesInput, {
    nullable: true,
  })
  bookings?: BookingUpdateManyWithoutServicesInput;
}

export { ServiceUpdateInput as ServiceUpdateInput };
